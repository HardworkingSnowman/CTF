#! usr/bin/python
# coding=utf-8
from pwn import *
from Crypto.Util.number import *

# n=p*q
def problem1(p, q):
  return p*q

# q=n/p
def problem2(n, p):
  return n/p

# problem3 叫妳用e, n推出d，妳得要先有(p-1)*(q-1)，然後再算出e對(p-1)*(q-1)的反元素。
# 要做到這一步得先知道p, q，也就是要因式分解n
# 這是一個discrete logarithm，只要p, q夠大，基本上是沒辦法解出來的，這也就是RSA的安全性所在

# totient好像就是 phi(就是一個圈圈插著一根棒子的那個符號)
def problem4(p, q):
  return (p-1)*(q-1)

# 叫妳用e, n幫原文加密
def problem5(plaintext, e, n):
  return (plaintext**e)%n

# problem6 只給e, n就要解出原文，這一樣須要用到d，讓ciphertext的d次方mod n=plaintext。
# 所以跟problem3一樣是discrete logarithm

# 用e, p, q求反元素e對phi的反元素d，最原始的方法是從1到phi一個一個試，只要除以phi餘數為1就對了，但是這太慢了，所以用Crypto.Util.number的內建函數
def problem7(e, p, q):
  return inverse(e, (p-1)*(q-1))

# 給所有資訊要解出原文，所以就根據前面講的，找出d之後，對ciphertext做d次方再mod n
def problem8(p, e, n, ciphertext):
  q=n/p
  d=problem7(e, p, q)
  return pow(ciphertext, d, n)

# 最後告訴妳flag就是最後一題plaintext的hex，所以把他轉回來就是了
def convert_plaintext_to_flag(plaintext):
  return unhex(hex(plaintext)[2::])

print('problem1:\n'+str(problem1(93187, 94603)))
print('problem2:\n'+str(problem2(6315400919, 81203)))
# problem3 N
print('problem4:\n'+str(problem4(78203, 79999)))
print('problem5:\n'+str(problem5(1815907181716474805136452061793917684000871911998851410864797078911161933431337632774829806207517001958179617856720738101327521552576351369691667910371502971480153619360010341709624631317220940851114914911751279825748, 3, 29129463609326322559521123136222078780585451208149138547799121083622333250646678767769126248182207478527881025116332742616201890576280859777513414460842754045651093593251726785499360828237897586278068419875517543013545369871704159718105354690802726645710699029936754265654381929650494383622583174075805797766685192325859982797796060391271817578087472948205626257717479858369754502615173773514087437504532994142632207906501079835037052797306690891600559321673928943158514646572885986881016569647357891598545880304236145548059520898133142087545369179876065657214225826997676844000054327141666320553082128424707948750331)))
# problem6 N
print('problem7:\n'+str(problem7(65537, 97846775312392801037224396977012615848433199640105786119757047098757998273009741128821931277074555731813289423891389911801250326299324018557072727051765547115514791337578758859803890173153277252326496062476389498019821358465433398338364421624871010292162533041884897182597065662521825095949253625730631876637, 92092076805892533739724722602668675840671093008520241548191914215399824020372076186460768206814914423802230398410980218741906960527104568970225804374404612617736579286959865287226538692911376507934256844456333236362669879347073756238894784951597211105734179388300051579994253565459304743059533646753003894559)))
print('problem8:\n'+str(problem8(153143042272527868798412612417204434156935146874282990942386694020462861918068684561281763577034706600608387699148071015194725533394126069826857182428660427818277378724977554365910231524827258160904493774748749088477328204812171935987088715261127321911849092207070653272176072509933245978935455542420691737433, 65537, 23952937352643527451379227516428377705004894508566304313177880191662177061878993798938496818120987817049538365206671401938265663712351239785237507341311858383628932183083145614696585411921662992078376103990806989257289472590902167457302888198293135333083734504191910953238278860923153746261500759411620299864395158783509535039259714359526738924736952759753503357614939203434092075676169179112452620687731670534906069845965633455748606649062394293289967059348143206600765820021392608270528856238306849191113241355842396325210132358046616312901337987464473799040762271876389031455051640937681745409057246190498795697239, 5315135537182226856134532843338546481354659841681272223692273789930341302489189252395544040217036010025492161730920090820789264419456405499853943420863961834511620167348215712366219204972198527365477630427263725627920265227612760416678425823843187407675643742844283110052895704455415142735463486037912801307917634230788549540802477270278755052542590491708620341889689884020271200598596327430790861785538107067664504281508756159305916221674161062222221931717498244841323828452111473034440447694160917521358885718436832783214139059379459896493819067235346238816701274408935126796953373891399167497687512301978797146598)))
print('flag:\n'+str(convert_plaintext_to_flag(problem8(153143042272527868798412612417204434156935146874282990942386694020462861918068684561281763577034706600608387699148071015194725533394126069826857182428660427818277378724977554365910231524827258160904493774748749088477328204812171935987088715261127321911849092207070653272176072509933245978935455542420691737433, 65537, 23952937352643527451379227516428377705004894508566304313177880191662177061878993798938496818120987817049538365206671401938265663712351239785237507341311858383628932183083145614696585411921662992078376103990806989257289472590902167457302888198293135333083734504191910953238278860923153746261500759411620299864395158783509535039259714359526738924736952759753503357614939203434092075676169179112452620687731670534906069845965633455748606649062394293289967059348143206600765820021392608270528856238306849191113241355842396325210132358046616312901337987464473799040762271876389031455051640937681745409057246190498795697239, 5315135537182226856134532843338546481354659841681272223692273789930341302489189252395544040217036010025492161730920090820789264419456405499853943420863961834511620167348215712366219204972198527365477630427263725627920265227612760416678425823843187407675643742844283110052895704455415142735463486037912801307917634230788549540802477270278755052542590491708620341889689884020271200598596327430790861785538107067664504281508756159305916221674161062222221931717498244841323828452111473034440447694160917521358885718436832783214139059379459896493819067235346238816701274408935126796953373891399167497687512301978797146598))))

p=remote('2018shell3.picoctf.com', 40440)
# 1
p.recvuntil('IS THIS POSSIBLE and FEASIBLE? (Y/N):')
p.sendline('Y')
p.recvuntil('n:')
p.sendline('8815769761')
# 2
p.recvuntil('IS THIS POSSIBLE and FEASIBLE? (Y/N):')
p.sendline('Y')
p.recvuntil('q:')
p.sendline('77773')
# 3
p.recvuntil('IS THIS POSSIBLE and FEASIBLE? (Y/N):')
p.sendline('N')
# 4
p.recvuntil('IS THIS POSSIBLE and FEASIBLE? (Y/N):')
p.sendline('Y')
p.recvuntil('totient(n):')
p.sendline('6256003596')
# 5
p.recvuntil('IS THIS POSSIBLE and FEASIBLE? (Y/N):')
p.sendline('Y')
p.recvuntil('ciphertext:')
p.sendline('26722917505435451150596710555980625220524134812001687080485341361511207096550823814926607028717403343344600191255790864873639087129323153797404989216681535785492257030896045464472300400447688001563694767148451912130180323038978568872458130612657140514751874493071944456290959151981399532582347021031424096175747508579453024891862161356081561032045394147561900547733602483979861042957169820579569242714893461713308057915755735700329990893197650028440038700231719057433874201113850357283873424698585951160069976869223244147124759020366717935504226979456299659682165757462057188430539271285705680101066120475874786208053')
# 6
p.recvuntil('IS THIS POSSIBLE and FEASIBLE? (Y/N):')
p.sendline('N')
# 7
p.recvuntil('IS THIS POSSIBLE and FEASIBLE? (Y/N):')
p.sendline('Y')
p.recvuntil('d:')
p.sendline('1405046269503207469140791548403639533127416416214210694972085079171787580463776820425965898174272870486015739516125786182821637006600742140682552321645503743280670839819078749092730110549881891271317396450158021688253989767145578723458252769465545504142139663476747479225923933192421405464414574786272963741656223941750084051228611576708609346787101088759062724389874160693008783334605903142528824559223515203978707969795087506678894006628296743079886244349469131831225757926844843554897638786146036869572653204735650843186722732736888918789379054050122205253165705085538743651258400390580971043144644984654914856729')
# 8
p.recvuntil('IS THIS POSSIBLE and FEASIBLE? (Y/N):')
p.sendline('Y')
p.recvuntil('plaintext:')
p.sendline('240109877286251840533272915662757983981706320845661471802585807564915966910384301849411666983334013')

print p.recv(1024)
print p.recv(1024)
print p.recv(1024)
p.close()